{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Atlas Gradle Plugin","text":"<p>Atlas is a Gradle plugin for generating, configuring and curating diagrams to illustrate your project's module structure:</p> <ol> <li>Fully supports Gradle 9 and its configuration caching.</li> <li>Supports three separate frameworks as outputs:<ul> <li>D2: Official docs here</li> <li>Graphviz: Official docs here</li> <li>Mermaid: Official docs here</li> </ul> </li> <li>Offers wide-ranging APIs for customizing your charts</li> <li>Supports <code>gradle check</code>-ing your generated diagrams, to validate that they match the current state of your project</li> <li>Supports attaching the chart generation to IntelliJ's sync button, so you don't even need to run it manually.</li> </ol> <p>Inspiration</p> <p>This project was built as a spiritial successor to com.vanniktech.dependency.graph.generator project - but with more configurability and targeting modern Gradle releases.</p>"},{"location":"#installation","title":"Installation","text":"<p>For proper release builds, you want to add the central repository to your <code>settings.gradle.kts</code> file:</p> <pre><code>pluginManagement {\n  repositories {\n    mavenCentral()\n  }\n}\n</code></pre> <p>Or for pre-release snapshots builds (the latest state of the main branch in this repo), add the Maven Central snapshots repo:</p> <pre><code>pluginManagement {\n  repositories {\n    maven(\"https://central.sonatype.com/repository/maven-snapshots/\")\n  }\n}\n</code></pre> <p>Then in your root <code>build.gradle.kts</code> file:</p> <pre><code>plugins {\n  // \ud83d\udea8\ud83d\udea8\ud83d\udea8 WARNING: You can only apply one of these at a time! \ud83d\udea8\ud83d\udea8\ud83d\udea8\n  id(\"dev.jonpoulton.atlas.d2\") version \"x.y.z\"\n  id(\"dev.jonpoulton.atlas.graphviz\") version \"x.y.z\"\n  id(\"dev.jonpoulton.atlas.mermaid\") version \"x.y.z\"\n}\n</code></pre> <p>Then generate your diagrams by running:</p> <pre><code>gradle atlasGenerate\n</code></pre> <p>or validate them by running:</p> <pre><code>gradle atlasCheck\n</code></pre> <p>That's all you need to get it working! See the next pages for further configuration of each of the above plugins.</p>"},{"location":"samples/","title":"Samples","text":"AB <p>Tab A contents</p> <p>Tab B contents</p>"},{"location":"usage-common/","title":"Common Usage","text":""},{"location":"usage-common/#overview","title":"Overview","text":"<p>Configuration is primarily done via the <code>atlas</code> Gradle extension function, accessible in your root build file. See here for the KDoc, or here for the source file.</p> <pre><code>// none of these are required - these values are the defaults\natlas {\n  alsoTraverseUpwards = false\n  checkOutputs = true\n  displayLinkLabels = false\n  generateOnSync = false\n  groupModules = false\n  ignoredConfigs = setOf(\"debug\", \"kover\", \"ksp\", \"test\")\n  ignoredModules = emptySet&lt;String&gt;()\n  printFilesToConsole = false\n\n  moduleTypes {\n    // ...\n  }\n\n  linkTypes {\n    // ...\n  }\n\n  pathTransforms {\n    // ...\n  }\n}\n</code></pre> <p>Alternatively, if calling from a <code>buildSrc</code> Kotlin file (or similar):</p> <pre><code>project.extensions.configure&lt;AtlasExtension&gt; {\n  // ...\n}\n</code></pre> <p>Any other configs beyond these are specific to the particular plugin you applied, see:</p> <ul> <li>Graphviz</li> <li>D2</li> <li>Mermaid</li> </ul>"},{"location":"usage-common/#properties","title":"Properties","text":""},{"location":"usage-common/#alsotraverseupwards","title":"alsoTraverseUpwards","text":"<pre><code>atlas {\n  alsoTraverseUpwards = true\n}\n</code></pre> <p>If enabled, the generated module graph will also go \"upwards\" (showing modules depending on this one) as well as the default \"downwards\"( modules being consumed by this one).</p> <p>Examples below from the perspective of <code>:android:lib</code>:</p> Disabled Enabled"},{"location":"usage-common/#checkoutputs","title":"checkOutputs","text":"<pre><code>atlas {\n  checkOutputs = true\n}\n</code></pre> <p>If enabled, a diffing task will be attached to <code>gradle check</code>. It will verify that your generated charts match the current state of the project layout, failing if not with a useful error message. Enabled by default.</p> <p>The generated task name will depend on your chosen framework (<code>D2</code>, <code>Mermaid</code> or <code>Graphviz</code>) and the file type that you're checking (<code>Chart</code> or <code>Legend</code>), e.g. <code>checkD2Chart</code> or <code>checkGraphvizLegend</code>.</p> <p>Even if this option is disabled, the task will still be created, it just won't be attached to <code>gradle check</code>.</p>"},{"location":"usage-common/#displaylinklabels","title":"displayLinkLabels","text":"<pre><code>atlas {\n  displayLinkLabels = true\n\n  linkTypes {\n    api(style = LinkStyle.Bold, displayName = \"API\")\n    implementation(LinkStyle.Dashed, color = \"red\")\n  }\n}\n</code></pre> <p>When enabled, a string label is attached on each module link, showing which configuration caused represents the link. When true, the <code>LinkTypeSpec.name</code> property will be used. Disabled by default.</p> <p>Requires some <code>linkTypes</code> to be declared - otherwise this will have no effect.</p> Disabled Enabled"},{"location":"usage-common/#generateonsync","title":"generateOnSync","text":"<pre><code>atlas {\n  generateOnSync = true\n}\n</code></pre> <p>When enabled, syncing your IntelliJ IDE (including Android Studio) will automatically trigger regeneration of your module diagrams. Disabled by default.</p> <p>Danger</p> <p>Be careful enabling this on larger projects - sync time might extend quite a bit.</p>"},{"location":"usage-common/#groupmodules","title":"groupModules","text":"<pre><code>atlas {\n  groupModules = true\n}\n</code></pre> <p>Set to true if you want module charts to gather together groups of modules into bordered containers. E.g. a graph with <code>\":a\"</code>, <code>\":b\"</code> and <code>\":c\"</code> won't be grouped at all because they don't share any path segments, but <code>\":a:b\"</code> and <code>\"a:c\"</code> will be grouped together. Disabled by default.</p> <p>Tip</p> <p>Remember this will have no effect if your modules aren't nested at all.</p> <p>Warning</p> <p>Automatic layout generation will get a bit complicated for larger projects when using grouping.</p> Disabled Enabled"},{"location":"usage-common/#ignoredconfigs","title":"ignoredConfigs","text":"<pre><code>atlas {\n  ignoredConfigs = setOf(\"debug\", \"kover\", \"ksp\", \"test\")\n}\n</code></pre> <p>Use this to configure Gradle <code>Configuration</code>s to ignore when collating module diagrams. Gradle does have a load of configurations floating around (depending on your project) - most of which will be practically useless when generating a diagram like this.</p> <p>Defaults to <code>setOf(\"debug\", \"kover\", \"ksp\", \"test\")</code>.</p> <p>Remember</p> <p>If you don't ignore any configurations, you might end up with double links between modules - or broken builds</p>"},{"location":"usage-common/#ignoredmodules","title":"ignoredModules","text":"<pre><code>atlas {\n  ignoredModules = setOf(\n    \":path:to:some:module\",\n    \".*:test:.*\", // uses regex patterns\n  )\n}\n</code></pre> <p>Defaults to an empty set.</p>"},{"location":"usage-common/#printfilestoconsole","title":"printFilesToConsole","text":"<pre><code>atlas {\n  printFilesToConsole = true\n}\n</code></pre> <p>Set to true to print the absolute path of any generated files to the Gradle console output. You can use this to help with scripting, if you like.</p> <p>Disabled by default.</p>"},{"location":"usage-common/#functions","title":"Functions","text":""},{"location":"usage-common/#moduletypes","title":"moduleTypes","text":"<p>Use the <code>moduleTypes</code> block to identify module categories, along with the styling to apply to each one in the output chart. These stylings will depend on your choice of plugin (see their docs for details), but at a minimum, each with support setting:</p> <ul> <li>label string</li> <li>color, as a CSS color string (<code>\"chartreuse\"</code>) or hex string (<code>\"#7FFF00\"</code>)</li> <li>matcher, used to decide whether a given module should match this type:<ul> <li>pathContains - checks whether the module path (<code>\":modules:path:to:my:module\"</code>) contains a given string. Case sensitive.</li> <li>patchMatches - same as <code>pathContains</code>, but uses Regex pattern matching. You can also pass a <code>regexOptions</code> parameter to configure this more specifically, if you need.</li> <li>hasPluginId - checks whether the module has applied the given plugin ID string, e.g. <code>com.android.application</code> or <code>org.jebtrains.kotlin.jvm</code>.</li> </ul> </li> </ul> <p>Only one of these three module matchers should be specified.</p> <p>Sample usage:</p> <pre><code>atlas {\n  moduleTypes {\n    hasPluginId(\n      name = \"UI\",\n      color = \"#ABC123\",\n      pluginId = \"org.jetbrains.kotlin.plugin.compose\",\n    )\n\n    pathMatches(\n      name = \"Data\",\n      color = \"#ABCDEF\",\n      pathMatches = \".*data$\".toRegex(),\n    )\n\n    pathContains(name = \"Domain\", pathContains = \"domain\") {\n      // some custom config can go as a trailing lambda\n      // the available options here depends on the plugin variant\n    }\n  }\n}\n</code></pre> <p>A few module type quick-access functions are built into Atlas for use in the moduleTypes block if you need them:</p> <pre><code>atlas {\n  moduleTypes {\n    androidApp()\n    androidLib()\n    java()\n    kotlinJvm()\n    kotlinMultiplatform()\n    other()\n\n    // or useDefaults() to quickly add all of the above\n  }\n}\n</code></pre> <p>Warning</p> <p>Remember that the order of declaring module types does matter! When identifying a module, Atlas will use the first one and go down the list until it finds a match.</p> <p>The below example shows one module of each of the built-in module types in a sample D2 project layout:</p> <p></p> <p>Remember also that you can pass framework-specific configuration options into any module type declarations used above, with a trailing lambda. Example below comes from D2:</p> <pre><code>atlas {\n  moduleTypes {\n    androidApp {\n      shape = Shape.Hexagon\n      strokeWidth = 10\n    }\n\n    kotlinMultiplatform()\n\n    androidLibrary {\n      fontColor = \"red\"\n    }\n  }\n}\n</code></pre>"},{"location":"usage-common/#linktypes","title":"linkTypes","text":"<p>Use this block to configure categories of link to be detected in your project and drawn onto the modules chart. These are detected by Gradle's configuration names. In most cases you'll probably use <code>api</code> and <code>implementation</code> as your main link types, so these are available as quick-access config functions:</p> <pre><code>atlas {\n  linkTypes {\n    implementation(color = \"red\")\n\n    api(style = LinkStyle.Bold) {\n      // custom config here - plugin-specific\n    }\n  }\n}\n</code></pre> <p>Tip</p> <p>The <code>style</code> parameter on each of these will have different available options for each plugin. See the <code>LinkStyle</code> enum implementations for each one:</p> <ul> <li>Graphviz: Bold, Dashed, Dotted, Invis, Solid, Tapered. See here for details - specifically for \"edges\"</li> <li>Mermaid: Basic, Bold, Dashed, Invisible. See here for details</li> <li>D2: Basic, Bold, Dashed, Dotted, Invisible. See here for details</li> </ul> <p>Besides the default <code>api</code> and <code>implementation</code>, you can declare links representing other Gradle configurations too:</p> <pre><code>atlas {\n  linkTypes {\n    // All parameters are optional\n    \"compileOnly\"(\n      style = LinkStyle.Dotted,\n      color = \"#ABC123\",\n      displayName = \"Compile-Only\",\n    )\n  }\n}\n</code></pre> <p>Warning</p> <p>As with module types, remember that the order of declaration matters! Top takes priority. So if you define \"implementation\" before \"testImplementation\", you won't get any links matching the latter because they all also match the former.</p>"},{"location":"usage-common/#pathtransforms","title":"pathTransforms","text":"<p>This is a little API for modifying module paths when inserting them into any generated diagrams. For example if your modules are all within a <code>\"modules\"</code> directory in your project's root, you might want to call something like:</p> <pre><code>atlas {\n  pathTransforms {\n    // \":modules:path:to:something\" =&gt; \"path:to:something\"\n    remove(\"^:modules:\")\n\n    // \"path:to:something\" =&gt; \"path to something\"\n    replace(\":\", replacement = \" \")\n  }\n}\n</code></pre> <p>Remember the declarations inside <code>pathTransforms</code> are called in descending order. It does not support regex group replacement (yet?) - regex is only used for pattern matching.</p>"},{"location":"usage-common/#extra-properties","title":"Extra properties","text":"<p>Several components in Atlas make use of the <code>PropertiesSpec</code> interface, which allows you to apply arbitrary key-value pair properties to the interfaces that make use of it. Specifically, you can call <code>put(\"key\", value)</code>.</p> <p>The intention with this is to let you pass in anything to the scope in question - allowing you to make use of any new APIs in that framework which haven't been explicitly implemented in Atlas. Any usage of these keys is up to you to validate - sometimes the diagram framework won't give you a warning if you pass in an invalid key. If you have some brand-spanking new attribute that you want to apply somewhere:</p> <pre><code>atlas {\n  moduleTypes {\n    // no custom config necessary\n    androidApp()\n\n    // but if you want to, use a trailing lambda:\n    hasPluginId(\"Custom\", pluginId = \"com.custom.plugin\") {\n      // built-in setters for some known properties, depending on the context\n      fill = \"red\"\n      render3D = true\n    }\n\n    // standard colors/styles in the brackets, everything else in the lambda\n    java(color = \"orange\") {\n      // or custom setters for undefined properties\n      put(\"insertKeyHere\", \"some-value\")\n    }\n  }\n\n  linkTypes {\n    // no custom config necessary\n    api()\n\n    // again with the trailing lambda:\n    implementation {\n      animated = true\n      strokeWidth = 100\n    }\n  }\n\n  d2 {\n    layoutEngine {\n      elk {\n        algorithm = ElkAlgorithm.Layered\n        put(\"anotherElkProperty\", 420)\n      }\n    }\n\n    rootStyle {\n      strokeDash = 5\n      doubleBorder = true\n      put(\"somenewbool\", true)\n      put(\"somenewint\", 123)\n      put(\"somenewstring\", \"yes\")\n    }\n  }\n}\n</code></pre> <p>These examples are not exhaustive - you can do the same with many components in Mermand and Graphviz too. If you're using some API for customising styles - have a look at the API spec for that class to see what else is available.</p>"},{"location":"usage-d2/","title":"D2 Usage","text":""},{"location":"usage-d2/#overview","title":"Overview","text":"<p>See here for the official D2 docs or here for an online playground. Using and executing the D2 plugin requires an existing installation of the <code>d2</code> executable on the system PATH. If it's not on the PATH, you can use the <code>pathToD2Command</code> config option.</p> <p>See here for D2 installation steps.</p> <p>D2-specific configuration is performed from the <code>d2 { }</code> block within the base <code>atlas</code> extension function:</p> <pre><code>plugins {\n  id(\"dev.jonpoulton.atlas.d2\") version \"x.y.z\"\n}\n\natlas {\n  // other Atlas config - see common usage docs\n\n  d2 {\n    animateInterval = 10\n    animateLinks = true\n    center = true\n    direction = Direction.Down\n    fileFormat = FileFormat.Svg\n    groupLabelLocation = Location.Inside\n    groupLabelPosition = Position.TopCenter\n    layoutEngine = LayoutEngine.Dagre\n    pad = 5\n    pathToD2Command = \"/path/to/d2\"\n    sketch = true\n    theme = Theme.ColorblindClear\n    themeDark = Theme.DarkMauve\n\n    rootStyle {\n      // ...\n    }\n\n    globalProps {\n      // ...\n    }\n\n    layoutEngine {\n      // ...\n    }\n  }\n}\n</code></pre>"},{"location":"usage-d2/#generated-files","title":"Generated files","text":"<p>The D2 plugin will generate a <code>classes.d2</code> file in the root project's <code>atlas</code> folder. This contains any shared styling, used between all child charts. It will also generate a <code>chart.d2</code> and a <code>chart.XXX</code> file for each submodule, the latter's file extension depending on fileFormat.</p>"},{"location":"usage-d2/#properties","title":"Properties","text":""},{"location":"usage-d2/#animateinterval","title":"animateInterval","text":"<pre><code>atlas {\n  d2 {\n    animateInterval = 100\n  }\n}\n</code></pre> <p>Only used if fileFormat is set to <code>FileFormat.Gif</code>.</p>"},{"location":"usage-d2/#animatelinks","title":"animateLinks","text":"<pre><code>atlas {\n  d2 {\n    animateLinks = true\n  }\n}\n</code></pre> <p>When enabled, links between all module nodes will be animated, as long as they aren't solidly-styled. Disabled by default.</p> <p>Warning</p> <p>This will only work for \"animatable\" output formats: either SVG or GIF. If you choose a different output, you'll get a Gradle warning to tell you about it when syncing the IDE.</p> Disabled Enabled"},{"location":"usage-d2/#center","title":"center","text":"<pre><code>atlas {\n  d2 {\n    center = true\n  }\n}\n</code></pre> <p>This flag centers the SVG within the containing viewbox. Doesn't really give an obvious change in me experience, but \u00af_(\u30c4)_/\u00af. See here.</p>"},{"location":"usage-d2/#direction","title":"direction","text":"<pre><code>atlas {\n  d2 {\n    direction = Direction.Down\n  }\n}\n</code></pre> <p>Sets the flow direction of the dependency chart. Defaults to <code>Direction.Down</code>.</p> Direction.Up Direction.Down Direction.Left Direction.Right"},{"location":"usage-d2/#fileformat","title":"fileFormat","text":"<pre><code>atlas {\n  d2 {\n    fileFormat = FileFormat.Svg\n  }\n}\n</code></pre> <p>Defaults to SVG. Available options:</p> <pre><code>FileFormat.Svg\nFileFormat.Png\nFileFormat.Pdf\nFileFormat.Pptx\nFileFormat.Gif\nFileFormat.Ascii\n</code></pre> <p>Warning</p> <p>Only SVG and ASCII outputs can be run on all (known?) machines without further supporting software. On my dev machine at least, trying to run PNG, PDR, PPTX or GIF output causes an automatic download attempt of Chromium. This is because D2 depends on PlayWright to do the conversion. Annoyingly, D2 will try to start the download/install without asking first... See here for other people complaining about this.</p> <p>For reference, an ASCII chart looks like below. It (hopefully obviously) doesn't support more complex features like coloring, animation, etc. It is pretty cool though!</p> <pre><code>      \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n      \u2502:android:app \u2502\n      \u2502             \u2502\n      \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n           \u2502   \u2502\n      \u250c\u2500\u2500\u2500\u2500\u2518   \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n      \u2502                \u2502\n      \u2502                \u25bc\n      \u2502          \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n      \u2502          \u2502:kotlin:kmp \u2502\n      \u2502          \u2502            \u2502\n      \u2502          \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n      \u2502             \u2502  \u2502   \u2502\n      \u2502   \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518  \u2502   \u2514\u2500\u2500\u2500\u2510\n      \u2502   \u2502            \u2502       \u2502\n      \u25bc   \u25bc            \u25bc       \u2502\n \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510 \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2510      \u2502\n \u2502:android:lib \u2502 \u2502:java \u2502      \u2502\n \u2502             \u2502 \u2502      \u2502      \u2502\n \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518 \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2518      \u2502\n      \u2502   \u2502          \u2502         \u2502\n      \u2502   \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2502\u2500\u2500\u2500\u2500\u2500\u2510   \u2502\n      \u2502              \u2502     \u2502   \u2502\n      \u2514\u2500\u2500\u2500\u2500\u2500\u2510  \u250c\u2500\u2500\u2500\u2500\u2500\u2518     \u2502   \u2502\n            \u2502  \u2502           \u2502   \u2502\n            \u25bc  \u25bc           \u25bc   \u25bc\n         \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510     \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n         \u2502:other \u2502     \u2502:kotlin:jvm \u2502\n         \u2502       \u2502     \u2502            \u2502\n         \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518     \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n</code></pre>"},{"location":"usage-d2/#grouplabellocation-grouplabelposition","title":"groupLabelLocation &amp; groupLabelPosition","text":"<pre><code>atlas {\n  groupModules = true\n\n  d2 {\n    groupLabelLocation = Location.Outside\n    groupLabelPosition = Position.TopCenter\n  }\n}\n</code></pre> <p>Only does anything if <code>atlas.groupModules = true</code>.</p> Border center left Inside bottom right Outside bottom center"},{"location":"usage-d2/#pad","title":"pad","text":"<pre><code>atlas {\n  d2 {\n    pad = 100\n  }\n}\n</code></pre> <p>Should probably be called <code>padding</code> for clarity, but kept as <code>pad</code> for consistency with the underlying D2 config parlance. Units are in pixels, and default value is 100.</p> 0 padding 200 padding"},{"location":"usage-d2/#pathtod2command","title":"pathToD2Command","text":"<pre><code>atlas {\n  d2 {\n    pathToD2Command = \"/custom/path/to/d2\"\n  }\n}\n</code></pre> <p>By default, Atlas will try to call <code>d2</code> from the system path. Use this to call from a custom installation directory instead.</p>"},{"location":"usage-d2/#sketch","title":"sketch","text":"<pre><code>atlas {\n  d2 {\n    sketch = true\n  }\n}\n</code></pre> <p>Draws the chart in an excalidraw-like format, with pseudo-handwritten font and shaded backgrounds on shapes. Defaults to false.</p> <p>Warning</p> <p>For awareness: enabling this property will inflate the size of the generated SVG file by a factor of ~4.5: the example below is 71kB, and disabling the flag drops it down to 15kB. It does look pretty nice, though.</p> <p></p>"},{"location":"usage-d2/#theme-themedark","title":"theme &amp; themeDark","text":"<pre><code>atlas {\n  d2 {\n    theme = Theme.ShirleyTemple\n    themeDark = Theme.DarkMauve\n  }\n}\n</code></pre> <p>D2 comes with a suite of lovely built-in color schemes which you can apply to your charts. If you generate an SVG, you can also apply a separate dark theme to allow the file to support browsers in both dark and light screen display modes. Alternatively, you can specify one of the two dark themes in the <code>theme</code> parameter to force an always-dark theme, regardless of website/browser settings.</p> <p>See here for the full list of themes in the D2 documentation. Some examples are shown below, where the bottom-right one will toggle between light and dark based on the browser theme. Try switching the theme from the site toolbar (or change in your browser's settings) to see!</p> <p>Info</p> <p>If you set a specific color for a module type using the <code>moduleTypes</code> API, it will overwrite the theme color for that node. Same for link colors.</p> <p>Tip</p> <p>Remember also that you can override the chart's background color using rootStyle's <code>fill</code> property.</p> Default Shirley Temple Dark Mauve Aubergine / Dark Flagship Terrastruct"},{"location":"usage-d2/#functions","title":"Functions","text":""},{"location":"usage-d2/#layoutengine","title":"layoutEngine","text":"<pre><code>atlas {\n  d2 {\n    layoutEngine {\n      // only call one of the below config functions!\n      // if you call multiple, only the last one will be used.\n      dagre {\n        nodeSep = 60\n        edgeSep = 20\n      }\n\n      elk {\n        algorithm = ElkAlgorithm.Layered\n        edgeNodeBetweenLayers = 40\n        nodeNodeBetweenLayers = 70\n        nodeSelfLoop = 50\n      }\n\n      tala {\n        // nothing yet!\n      }\n    }\n  }\n}\n</code></pre> <p>Defines the underlying engine used by D2 to organise the module nodes in each chart. See this link in the D2 docs for more detailed information. The available options are:</p> <ul> <li>Dagre: default option.</li> <li>Elk: Framework from Eclipse for diagram generation - also supported by Mermaid.</li> <li>Tala: Technically supported but it's closed source, so you need an installation of this engine on your machine from somewhere other than the public D2 installation. Only included here because it's in the D2 docs \u00af_(\u30c4)_/\u00af. Since it's a private engine, I've no idea how it's supposed to look and I don't have an example screenshot for you. Sorry-not-sorry!</li> </ul> <p>Screenshots below are with all default settings.</p> Dagre Elk"},{"location":"usage-d2/#rootstyle","title":"rootStyle","text":"<pre><code>atlas {\n  d2 {\n    rootStyle {\n      fill = \"white\"\n      fillPattern = FillPattern.Grain\n      stroke = \"firebrick\"\n      strokeWidth = 5\n      strokeDash = 3\n      doubleBorder = true\n    }\n  }\n}\n</code></pre> <p>A set of style properties to be applied to the chart itself. The most common one in my experience is <code>fill</code>, which you can set to <code>transparent</code> or any other CSS color or hex string.</p> <p>Check the D2 docs for the possible values of these properties. All are optional.</p>"},{"location":"usage-d2/#globalprops","title":"globalProps","text":"<pre><code>atlas {\n  d2 {\n    globalProps {\n      arrowType = ArrowType.Circle\n      fillArrowHeads = false\n      font = Font.Mono\n      fontSize = 15\n    }\n  }\n}\n</code></pre> <p>Style properties to be applied to all nodes (module shapes) and links by default, unless overridden by <code>linkTypes</code> or <code>moduleTypes</code> config.</p> <p>Note</p> <p>Be aware that <code>font</code> can only take the value <code>Mono</code>. If you want the default font, leave it alone or set to null.</p> <p>Tip</p> <p>As a bonus, in <code>globalProps</code> you can also make use of D2's wonderfully-complicated \"globs\" feature to apply some style to all matching nodes/links in the chart. An example from the sample-d2 project in this repo, which sets all text on link labels to black:</p> <pre><code>atlas {\n  d2 {\n    globalProps {\n      put(\"(** -&gt; **)[*].style.font-color\", \"black\")\n    }\n  }\n}\n</code></pre> <p>I'm not going to document all this in here, but take a look at the D2 docs if you're interested. If you want to add them to your chart, <code>globalProps</code> is probably(?) the best place for it. This will add the glob property to the global <code>classes.d2</code> file, which gets auto-imported into all module chart diagrams.</p>"},{"location":"usage-graphviz/","title":"Graphviz Usage","text":"<p>TBC</p>"},{"location":"usage-mermaid/","title":"Mermaid Usage","text":"<p>TBC</p>"}]}